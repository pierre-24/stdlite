title: Public API documentation
description: |
  This section describes the public API of `libstdlite`.
  
  --8<-- "docs/includes/API.md"

output: docs/API
files:
  - "include/*.h"
  - "include/**/*.h"
  - "app/*.h"
groups:
  - name: logging
    title: Logging and errors
    description: |
      Handling of log, of errors, and of error messages.
      
      ```c
      #include <stdlite/logging.h>
      ```
      
      Also contains function to signal warnings and debug messages.
      
      By default `DEBUG_LVL=1 && LOG_LVL = 1`, which allows logs, errors and warnings to be printed. 
      To shut down every messages, use `stdl_set_debug_level(-1); stdl_set_log_level(-1);`.
  - name: wavefunction
    title: Wavefunction
    description: |
      Store the result of a QC calculation, which is the input for subsequent (s)TD-DFT calculations.
      
      ```c
      #include <stdlite/wavefunction.h>
      ```
  - name: basis
    title: Basis set
    description: |
      Describe a set of basis functions, centered on atoms.
      Also provide functions that computes expectation values (integrals) in AO basis.
      
      ```c
      #include <stdlite/basis.h>
      ```
  
      --8<-- "docs/includes/basis.md"
  - name: context
    title: Context handler
    description: |
      Setup and modify a calculation.

      ```c
      #include <stdlite/context.h>
      ```
  - name: property
    title: Properties
    description: |
      Use the linear response vectors to compute some properties.
      
      ```c
      #include <stdlite/property.h>
      ```
  - name: response
    title: Response functions
    description: |
      Solve the linear response problem or the Casida equation.
      
      ```c
      #include <stdlite/response.h>
      ```
  - name: helpers
    title: Helpers functions and macros
    description: |
      Helpers functions and macros.
      
      ```c
      #include <stdlite/helpers.h>
      ```
  - name: utilities
    title: Utilities
    description: Utility functions, not directly required to use the library.
    groups:
      - name: lexer
        title: Lexer
        description: |
          A character per character lexer, that assign types to certain kind of characters.
      
          ```c
          #include <stdlite/utils/lexer.h>
          ```
      - name: base_parser
        title: Basic parser utilities
        description: |
          Basic parser utilities to extract strings, integers, and real numbers from files.
          
          ```c
          #include <stdlite/utils/base_parser.h>
          ```
      - name: qexp
        title: Experimental quantities
        description: |
          Utilities to compute experimental quantities (generally from rotational averaging).
          
          ```c
          #include <stdlite/utils/experimental_quantity.h>
          ```
          
          --8<-- "docs/includes/experimental_quantity.md"
      - name: fchk_parser
        title: FCHK parser
        description: |
          Parser for the FCHK files generated by Gaussian.
          FCHK stands for *formatted checkpoint*, for which the format is described in the "FChk File" tab of [this page](https://gaussian.com/interfacing/).
          
          ```c
          #include <stdlite/utils/fchk_parser.h>
          ```
          
          --8<-- "docs/includes/fchk_parser.md"
      - name: matrix
        title: Matrices
        description: |
          Utilities to work with matrices.
          
          !!! note
              + For symmetric matrices (`sy`), it is generally assumed that the lower triangle part (`UPLO=L`) is provided, while the upper part might not be referenced.
              + Symmetry packed storage (`sp`) refers to the [lower triangle form](https://netlib.org/lapack/lug/node123.html) (`UPLO=L`), so: `[a_00, a_10, a_11, a_20, a_21, ..., a_NN]`.
          
          ```c
          #include <stdlite/utils/matrix.h>
          ```
      - name: molden_parser
        title: MOLDEN file parser
        description: |
          Parser for MOLDEN file, a common container of QM results that can be generated by (or, sometimes, from) a bunch of quantum chemistry programs.
          The [MOLDEN file format](https://www.theochem.ru.nl/molden/molden_format.html) originates from the [MOLDEN](https://www.theochem.ru.nl/molden/) program whose goal was to visualize molecular orbitals.
          
          ```c
          #include <stdlite/utils/molden_parser.h>
          ```
          
          --8<-- "docs/includes/molden_parser.md"
      - name: permutations
        title: Permutations
        description: |
          Deal with permutations.
          
          ```c
          #include <stdlite/utils/permutations.h>
          ```
          
          !!! warning
          
              When using permutations on an array of structure, keep in mind [structure padding](https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/), especially when removing duplicates.
          ```

  - name: app
    title: The application
    description: API of `stdlite_run`.
    groups:
      - name: user_input_handler
        title: User input handler
        description: |
          Deals with all user inputs and convert that into requests.
          
          ```c
          #include "user_input_handler.h"
          ```
      - name: requests
        title: Requests for response
        description: |
          Handle bare response and linear response vector requests.
          
          ```c
          #include "response_requests.h"
          ```
      - name: responses_handler
        title: Responses handler
        description: |
          Deals with responses, by computing them.
          
          ```c
          #include "responses_handler.h"
          ```