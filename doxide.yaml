title: Public API documentation
description: |
  This section describes the public API of `libstdlite`.
  
  ## Basic principles
  
  + Unless otherwise mentioned, everything inputs and outputs are (to be) given in [atomic units](https://en.wikipedia.org/wiki/Atomic_units) (of energy [hartree], of length [bohr], etc).
  
   + Every object, enum, or function that belongs to the public library API starts with `stdl_`.
  
  + The user is required delete all objects created within the library by using the provided deletor functions to avoid memory leaks.
    Furthermore, except for constructors, each function return an error code (see [error codes](./errors/stdl_error_code_)) or `STDL_ERR_OK` if everything went well. 
    For example,
    
    ```c
    #include <stdlite/utils/base_parser.h>
    
    int an_integer;
    FILE* f = open("tmp.txt");
    
    if(f != NULL) {
      stdl_lexer* lexer = stdl_lexer_new(f); // creator
    
      if(lexer != NULL) {
        if(stdl_parser_get_integer(lx, &an_integer) == STDL_ERR_OK) {
          printf("read: %d\n", an_integer);
        }
      
        stdl_lexer_delete(lx); // deletor
      }
      
      fclose(f);
    }
    ```
output: docs/API
files:
  - "src/*.c"
  - "src/**/*.c"
  - "include/*.h"
  - "include/**/*.h"
groups:
  - name: basis
    title: Basis set
    description: |
      Describe a set of basis functions, centered on atoms.
      
      ```c
      #include <stdlite/basis.h>
      ```
      
      Follows the structure of [`libcint`](https://github.com/sunqm/libcint/blob/master/doc/program_ref.txt), so that it can be used to compute extra integrals.
  - name: errors
    title: Error definition and handling
    description: |
      Handling of errors and error messages.
      
      ```c
      #include <stdlite/errors.h>
      ```
      
      Also contains function to signal warnings and debug messages.
      
      By default `DEBUG_LVL=1`, which allows errors and warnings to be printed. 
      To shut down every messages, use `stdl_set_debug_level(-1)`.
  - name: wavefunction
    title: Wavefunction results
    description: |
      Store the result of a QC calculation, which is the input for subsequent (s)TD-DFT calculations.
      
      ```c
      #include <stdlite/wavefunction.h>
      ```
  - name: utilities
    title: Utilities
    description: Utility functions, not directly required to use the library.
    groups:
      - name: lexer
        title: Lexer
        description: |
          A character per character lexer, that assign types to certain kind of characters.
      
          ```c
          #include <stdlite/utils/lexer.h>
          ```
      - name: base_parser
        title: Basic parser utilities
        description: |
          Basic parser utilities to extract strings, integers, and real numbers from files.
          
          ```c
          #include <stdlite/utils/base_parser.h>
          ```
      - name: fchk_parser
        title: FCHK parser
        description: |
          Parser for FCHK files generated by Gaussian.
          FCHK stands for *formatted checkpoint*, for which the format is better described in the "Fchk file" tab of [this page](https://gaussian.com/interfacing/).
          
          ```c
          #include <stdlite/utils/fchk_parser.h>
          ```
          
          While this parser contains some safeguards, it works better if the FCHK is correctly formatted.
          
          !!! warning
          
              The logical type, `L`, is not implemented. However, it does not seems to be used in production FCHK.
              Scalar `C` is also not implemented nor used.